#
# Example OMNeT++ configuration to test WLAN Fast Initial Link Setup (FILS) feature
# 
# This scenario involves three WLAN access points at fixed positions 
# and a WLAN station traveling on road.
# The station establishes a communication link with the access points and 
# communicates data traffic with a media server in the backend network. 
#
# Copyright (C) 2023 TOYOTA MOTOR CORPORATION. ALL RIGHTS RESERVED.
#

[General]
network = grid.Scenario
cmdenv-express-mode = false
cmdenv-autoflush = false
cmdenv-status-frequency = 1s
debug-on-errors = true
*.playgroundSizeX = 1100m
*.playgroundSizeY = 1100m
*.playgroundSizeZ = 50m
**.vector-recording = true

# ------------------------------------------------------
# Vehicle mobility
# ------------------------------------------------------
*.car[*].mobility.typename = "VeinsInetMobility"
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.moduleName = "car"
*.manager.autoShutdown = true
*.manager.launchConfig = xmldoc("grid.launchd.xml")
*.manager.moduleType = "org.car2x.veins.subprojects.veins_inet.VeinsInetCar"

# ------------------------------------------------------
# WLAN radio medium parameters
# ------------------------------------------------------
*.radioMedium.passLoss.typename = "LogNormalShadowing"
*.radioMedium.backgroundNoise.power = -90dBm  # -110dBm (default)
*.radioMedium.mediumLimitCache.minReceptionPower = -70dBm  # -85dBm (default)

# ------------------------------------------------------
# Configure WLAN interfaces on cars
# ------------------------------------------------------
*.car[*].wlan[0].radio.transmitter.power = 10mW
*.car[*].wlan[*].radio.antenna.mobility.typename = "AttachedMobility"  # Attached to another mobility at a given offset
*.car[*].wlan[*].radio.antenna.mobility.mobilityModule = "^.^.^.^.mobility"
*.car[*].wlan[*].radio.antenna.mobility.offsetX = -2.5m
*.car[*].wlan[*].radio.antenna.mobility.offsetZ = 1.5m
*.car[*].wlan[*].mgmt.typename = "Ieee80211MgmtSta"
*.car[*].wlan[*].agent.typename = "Ieee80211AgentSta"
*.car[*].wlan[*].agent.authenticationTimeout = 1.0s
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMinX = 0m
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMaxX = 0m
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMinY = 0m
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMaxY = 0m
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMinZ = 0m
*.car[*].wlan[*].radio.antenna.mobility.constraintAreaMaxZ = 0m
*.car[*].wlan[0].opMode = "n(mixed-2.4Ghz)"
*.car[*].wlan[0].radio.typename = "Ieee80211ScalarRadio"
*.car[*].wlan[0].radio.bandName = "2.4 GHz"
*.car[*].wlan[0].radio.channelNumber = 0  # Initial channel number within the band
*.car[*].wlan[0].radio.bandwidth = 20 MHz

# ------------------------------------------------------
# IPv4 configurator
# ------------------------------------------------------
*.configurator.config = xmldoc("config.xml")
*.car[*].ipv4.configurator.typename = "HostAutoConfiguratorWifiAp"
*.car[*].ipv4.configurator.interfaces = "wlan0 lo0"

# ------------------------------------------------------
# Configure WLAN access point(s)
# ------------------------------------------------------
*.accessPoint0.mobility.initialX = 000m
*.accessPoint0.mobility.initialY = 500m
*.accessPoint1.mobility.initialX = 500m
*.accessPoint1.mobility.initialY = 500m
*.accessPoint2.mobility.initialX = 1000m
*.accessPoint2.mobility.initialY = 500m
*.accessPoint*.wlan[*].radio.transmitter.power = 10mW
*.accessPoint*.wlan[*].mgmt.numAuthSteps = 2
*.accessPoint*.wlan[*].mgmt.wifiRouterRoutingTableModule = "^.^.^.wifiRouter.ipv4.routingTable"
*.accessPoint*.wlan[*].mgmt.wifiRouterIfTableModule = "^.^.^.wifiRouter.interfaceTable"
*.accessPoint*.forwarding = true
*.accessPoint*.eth[*].mac.promiscuous = true
*.accessPoint*.eth[*].encap.typename = "EtherEncapFils"
*.accessPoint*.wlan[*].llc.typename = "Ieee80211PortalFils"
*.accessPoint*.wlan[*].llc.appDestPort = 12345  # Must match app[0].localPort
*.accessPoint*.wlan[0].opMode = "n(mixed-2.4Ghz)"
*.accessPoint*.wlan[0].radio.typename = "Ieee80211ScalarRadio"
*.accessPoint*.wlan[0].radio.bandName = "2.4 GHz"
*.accessPoint*.wlan[0].radio.channelNumber = 0  # Initial channel number within the band
*.accessPoint*.wlan[0].radio.bandwidth = 20 MHz

# ------------------------------------------------------
# Configure apps running on access points
# ------------------------------------------------------
*.accessPoint*.numApps = 1
*.accessPoint*.app[0].typename = "UdpEchoAppFils"
*.accessPoint*.app[0].localPort = 12345
*.accessPoint*.app[0].authSvrAddr = "filsAuthServer"
*.accessPoint*.app[0].authSvrPort = 5000
*.accessPoint*.app[0].authMessageLength = 300
*.accessPoint*.app[0].dhcpSvrAddr = "filsDhcpServer"
*.accessPoint*.app[0].dhcpSvrPort = 5000
*.accessPoint*.app[0].dhcpMessageLength = 300

# ------------------------------------------------------
# Configure apps running on cars
# Link setup is implemented in 3 apps each implementing
# a part of the authentication process. 
# Once a WLAN link is established, the 4th app is initiated
# which communicates data traffic back and forth to/from 
# a media server. 
# 
# TODOs:
# * EAP authentication should be implemented in a lower
#   layer of network stack rather than on app layer.
# * IP address should be assigned only after successful 
#   EAP authentication. 
# ------------------------------------------------------
*.car[*].numApps = 4  # Number of apps running on cars

# app[0]: detects completion of 802.11 association.
# Upon detection, it triggers DHCP IP address assignment.
*.car[*].app[0].typename = "UdpOneAssoc"
*.car[*].app[0].destAddresses = "127.0.0.1"
*.car[*].app[0].destPort = 5000
*.car[*].app[0].destPortFils = 5002
*.car[*].app[0].packetName = "UdpOneAssoc"
*.car[*].app[0].messageLength = 300Byte
*.car[*].app[0].startTime = .2s  # before end of Assocication sequence
*.car[*].app[0].sendInterval = 3600s  # must be larger than sim-time-limit

# app[1]: communicates with a DHCP server. 
# After getting it assigned, it triggers EAP authentication.
*.car[*].app[1].typename = "UdpEchoAppDelayNext"
*.car[*].app[1].remoteSvrAddr = "dhcpServer"
*.car[*].app[1].packetName = "dhcp"
*.car[*].app[1].localPort = 5000
*.car[*].app[1].delayTime = 0s
*.car[*].app[1].count = 2 # DHCP sequenceNum
*.car[*].app[1].nextPort = true # forward next port
*.car[*].app[1].reSendTimeout = 0.1s
*.car[*].app[1].remotePortSameAsLocal = 1

# app[2]: communicates with an authentication server. 
# Upon successful authentication, it initiates a 
# data communication app. 
*.car[*].app[2].typename = "UdpEchoAppDelayNext"
*.car[*].app[2].remoteSvrAddr = "authServer"
*.car[*].app[2].packetName = "Auth"
*.car[*].app[2].localPort = 5001
*.car[*].app[2].delayTime = 0.02s
*.car[*].app[2].count = 9 # == Auth. sequenceNum
*.car[*].app[2].reSendTimeout = 0.1s
*.car[*].app[2].nextPort = true # forward next port
*.car[*].app[2].remotePortSameAsLocal = 1

# app[3]: communicates with a media server to send 
# app data back and forth. 
*.car[*].app[3].typename = "UdpEchoAppDelayNext"
*.car[*].app[3].remoteSvrAddr = "mediaServer"
*.car[*].app[3].packetName = "media"
*.car[*].app[3].localPort = 5002
*.car[*].app[3].delayTime = 0.01s
*.car[*].app[3].count = 9999999 # infinity
*.car[*].app[3].reSendTimeout = 0.1s
*.car[*].app[3].nextPort = false # forward next port
*.car[*].app[3].remotePortSameAsLocal = 1

# ------------------------------------------------------
# DHCP server for regular link establishment
# ------------------------------------------------------
*.dhcpServer.numApps = 1
*.dhcpServer.app[0].typename = "UdpEchoAppDelay"
*.dhcpServer.app[0].localPort = 5000
*.dhcpServer.app[0].remotePortSameAsLocal = 1
*.dhcpServer.app[0].delayTime = 0s

# ------------------------------------------------------
# Authentication server for regular link establishment
# ------------------------------------------------------
*.authServer.numApps = 1
*.authServer.app[0].typename = "UdpEchoAppDelay"
*.authServer.app[0].localPort = 5001
*.authServer.app[0].remotePortSameAsLocal = 1
*.authServer.app[0].delayTime = 0.02s

# ------------------------------------------------------
# DHCP server for FILS
# ------------------------------------------------------
*.filsDhcpServer.numApps = 1
*.filsDhcpServer.app[0].typename = "UdpFilsSvr"
*.filsDhcpServer.app[0].localPort = 5000
*.filsDhcpServer.app[0].delayTime = 0.02s

# ------------------------------------------------------
# Authentication server for FILS
# ------------------------------------------------------
*.filsAuthServer.numApps = 1
*.filsAuthServer.app[0].typename = "UdpFilsSvr"
*.filsAuthServer.app[0].localPort = 5000
*.filsAuthServer.app[0].delayTime = 0.02s

# ------------------------------------------------------
# Media server that cars communicate app data with
# ------------------------------------------------------
*.mediaServer.numApps = 1
*.mediaServer.app[0].typename = "UdpEchoAppDelay"
*.mediaServer.app[0].localPort = 5002
*.mediaServer.app[0].remotePortSameAsLocal = 1
*.mediaServer.app[0].delayTime = 0s

# ------------------------------------------------------
# IntegratedCanvasVisualizer (2D)
# ------------------------------------------------------
 *.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

[Config RegularEAP]
description = Full EAP authentication
*.accessPoint*.wlan*.mgmt.enableFils = 0
*.car*.wlan*.mgmt.enableFils = 0

[Config FILS]
description = FILS
*.accessPoint*.wlan*.mgmt.enableFils = 1
*.car*.wlan*.mgmt.enableFils = 1
